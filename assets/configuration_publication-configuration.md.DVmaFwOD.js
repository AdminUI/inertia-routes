import{_ as i,c as a,o as e,ae as n}from"./chunks/framework.D86jDYxL.js";const g=JSON.parse('{"title":"Configuring Inertia Routes","description":"","frontmatter":{},"headers":[],"relativePath":"configuration/publication-configuration.md","filePath":"configuration/publication-configuration.md"}'),o={name:"configuration/publication-configuration.md"};function s(r,t,l,d,c,h){return e(),a("div",null,t[0]||(t[0]=[n('<h1 id="configuring-inertia-routes" tabindex="-1">Configuring Inertia Routes <a class="header-anchor" href="#configuring-inertia-routes" aria-label="Permalink to &quot;Configuring Inertia Routes&quot;">​</a></h1><h2 id="publishing-your-config" tabindex="-1">Publishing your config <a class="header-anchor" href="#publishing-your-config" aria-label="Permalink to &quot;Publishing your config&quot;">​</a></h2><p>All configuration for Inertia Routes is done via the designated Laravel config file. You can access this by publishing it in your app.</p><p>From the command line at the root of your app, type:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v:p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tag=inertia-routes</span></span></code></pre></div><p>This will publish a file in <code>/config/inertia-routes.php</code> where you can override the default options.</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table tabindex="0"><thead><tr><th>variable</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>configs</code></td><td>array</td><td>An associative array containing configuration options for Inertia Routes</td></tr><tr><td><code>configs.*.group</code></td><td>string</td><td>Uses a Ziggy route group defined in /config/ziggy.php.</td></tr><tr><td><code>configs.*.except</code></td><td>array</td><td>Include all routes except ones matching the defined patterns</td></tr><tr><td><code>configs.*.only</code></td><td>array</td><td>Include only routes that match the defined patterns</td></tr><tr><td><code>configs.*.filter</code></td><td>callable</td><td>A final callable function to execute on the generated routes array</td></tr></tbody></table><p>See the <a href="https://github.com/tighten/ziggy#filtering-routes" target="_blank" rel="noreferrer">Ziggy documentation</a> for further details about formatting your group, only and except options.</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>Defining both except and only within the same config block will result in no route filtering being applied</p></div><h2 id="changing-config-programmatically" tabindex="-1">Changing config programmatically <a class="header-anchor" href="#changing-config-programmatically" aria-label="Permalink to &quot;Changing config programmatically&quot;">​</a></h2><p>Inertia Routes provides a facade for changing the config block that will be used when generating your routes:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\AdminUI\\InertiaRoutes\\Facades\\InertiaRoutes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;admin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>You can call this function any time before the Inertia shares are compiled, but a good place might be from within your Inertia middleware&#39;s constructor.</p>',14)]))}const u=i(o,[["render",s]]);export{g as __pageData,u as default};
